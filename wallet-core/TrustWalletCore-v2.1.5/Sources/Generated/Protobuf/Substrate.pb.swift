// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Substrate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Substrate_Proto_Era {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// recent block number (called phase in polkadot code), should match block hash
  public var blockNumber: UInt64 = 0

  /// length of period, calculated from block number, e.g. 64
  public var period: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Substrate_Proto_Balance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messageOneof: TW_Substrate_Proto_Balance.OneOf_MessageOneof? = nil

  public var transfer: TW_Substrate_Proto_Balance.Transfer {
    get {
      if case .transfer(let v)? = messageOneof {return v}
      return TW_Substrate_Proto_Balance.Transfer()
    }
    set {messageOneof = .transfer(newValue)}
  }

  public var batchTransfer: TW_Substrate_Proto_Balance.BatchTransfer {
    get {
      if case .batchTransfer(let v)? = messageOneof {return v}
      return TW_Substrate_Proto_Balance.BatchTransfer()
    }
    set {messageOneof = .batchTransfer(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transfer(TW_Substrate_Proto_Balance.Transfer)
    case batchTransfer(TW_Substrate_Proto_Balance.BatchTransfer)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Substrate_Proto_Balance.OneOf_MessageOneof, rhs: TW_Substrate_Proto_Balance.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.batchTransfer, .batchTransfer): return {
        guard case .batchTransfer(let l) = lhs, case .batchTransfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var moduleIndex: Int32 = 0

    public var methodIndex: Int32 = 0

    public var toAddress: String = String()

    /// big integer
    public var value: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BatchTransfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var moduleIndex: Int32 = 0

    public var methodIndex: Int32 = 0

    public var transfers: [TW_Substrate_Proto_Balance.Transfer] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Substrate_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Recent block hash, or genesis hash if era is not set
  public var blockHash: Data = Data()

  public var genesisHash: Data = Data()

  /// Current account nonce
  public var nonce: UInt64 = 0

  public var specVersion: UInt32 = 0

  public var transactionVersion: UInt32 = 0

  /// big integer
  public var tip: Data = Data()

  /// Optional time validity limit, recommended, for replay-protection.  Empty means Immortal.
  public var era: TW_Substrate_Proto_Era {
    get {return _era ?? TW_Substrate_Proto_Era()}
    set {_era = newValue}
  }
  /// Returns true if `era` has been explicitly set.
  public var hasEra: Bool {return self._era != nil}
  /// Clears the value of `era`. Subsequent reads from it will return its default value.
  public mutating func clearEra() {self._era = nil}

  public var privateKey: Data = Data()

  public var network: Int32 = 0

  public var messageOneof: TW_Substrate_Proto_SigningInput.OneOf_MessageOneof? = nil

  public var balanceCall: TW_Substrate_Proto_Balance {
    get {
      if case .balanceCall(let v)? = messageOneof {return v}
      return TW_Substrate_Proto_Balance()
    }
    set {messageOneof = .balanceCall(newValue)}
  }

  public var multiAddress: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case balanceCall(TW_Substrate_Proto_Balance)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Substrate_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Substrate_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.balanceCall, .balanceCall): return {
        guard case .balanceCall(let l) = lhs, case .balanceCall(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _era: TW_Substrate_Proto_Era? = nil
}

/// Transaction signing output.
public struct TW_Substrate_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Substrate.Proto"

extension TW_Substrate_Proto_Era: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Era"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_number"),
    2: .same(proto: "period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockNumber) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.period) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 1)
    }
    if self.period != 0 {
      try visitor.visitSingularUInt64Field(value: self.period, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_Era, rhs: TW_Substrate_Proto_Era) -> Bool {
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Substrate_Proto_Balance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Balance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfer"),
    2: .same(proto: "batchTransfer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Substrate_Proto_Balance.Transfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .transfer(v)
        }
      }()
      case 2: try {
        var v: TW_Substrate_Proto_Balance.BatchTransfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .batchTransfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .batchTransfer(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.messageOneof {
    case .transfer?: try {
      guard case .transfer(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .batchTransfer?: try {
      guard case .batchTransfer(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_Balance, rhs: TW_Substrate_Proto_Balance) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Substrate_Proto_Balance.Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Substrate_Proto_Balance.protoMessageName + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_index"),
    2: .standard(proto: "method_index"),
    3: .standard(proto: "to_address"),
    4: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.moduleIndex) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.methodIndex) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.moduleIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.moduleIndex, fieldNumber: 1)
    }
    if self.methodIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.methodIndex, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_Balance.Transfer, rhs: TW_Substrate_Proto_Balance.Transfer) -> Bool {
    if lhs.moduleIndex != rhs.moduleIndex {return false}
    if lhs.methodIndex != rhs.methodIndex {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Substrate_Proto_Balance.BatchTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Substrate_Proto_Balance.protoMessageName + ".BatchTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_index"),
    2: .standard(proto: "method_index"),
    3: .same(proto: "transfers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.moduleIndex) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.methodIndex) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.transfers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.moduleIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.moduleIndex, fieldNumber: 1)
    }
    if self.methodIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.methodIndex, fieldNumber: 2)
    }
    if !self.transfers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transfers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_Balance.BatchTransfer, rhs: TW_Substrate_Proto_Balance.BatchTransfer) -> Bool {
    if lhs.moduleIndex != rhs.moduleIndex {return false}
    if lhs.methodIndex != rhs.methodIndex {return false}
    if lhs.transfers != rhs.transfers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Substrate_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_hash"),
    2: .standard(proto: "genesis_hash"),
    3: .same(proto: "nonce"),
    4: .standard(proto: "spec_version"),
    5: .standard(proto: "transaction_version"),
    6: .same(proto: "tip"),
    7: .same(proto: "era"),
    8: .standard(proto: "private_key"),
    9: .same(proto: "network"),
    10: .standard(proto: "balance_call"),
    11: .standard(proto: "multi_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.blockHash) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.genesisHash) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.specVersion) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.transactionVersion) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.tip) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._era) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.network) }()
      case 10: try {
        var v: TW_Substrate_Proto_Balance?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .balanceCall(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .balanceCall(v)
        }
      }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.multiAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.blockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockHash, fieldNumber: 1)
    }
    if !self.genesisHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.genesisHash, fieldNumber: 2)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 3)
    }
    if self.specVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.specVersion, fieldNumber: 4)
    }
    if self.transactionVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.transactionVersion, fieldNumber: 5)
    }
    if !self.tip.isEmpty {
      try visitor.visitSingularBytesField(value: self.tip, fieldNumber: 6)
    }
    try { if let v = self._era {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 8)
    }
    if self.network != 0 {
      try visitor.visitSingularInt32Field(value: self.network, fieldNumber: 9)
    }
    try { if case .balanceCall(let v)? = self.messageOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if self.multiAddress != false {
      try visitor.visitSingularBoolField(value: self.multiAddress, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_SigningInput, rhs: TW_Substrate_Proto_SigningInput) -> Bool {
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.genesisHash != rhs.genesisHash {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.specVersion != rhs.specVersion {return false}
    if lhs.transactionVersion != rhs.transactionVersion {return false}
    if lhs.tip != rhs.tip {return false}
    if lhs._era != rhs._era {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.network != rhs.network {return false}
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.multiAddress != rhs.multiAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Substrate_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Substrate_Proto_SigningOutput, rhs: TW_Substrate_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
