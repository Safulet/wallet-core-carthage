// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: NEO.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_NEO_Proto_TransactionInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var prevHash: Data = SwiftProtobuf.Internal.emptyData

  public var prevIndex: UInt32 = 0

  /// unspent value of UTXO
  public var value: Int64 = 0

  public var assetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_NEO_Proto_TransactionOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var assetID: String = String()

  public var amount: Int64 = 0

  public var toAddress: String = String()

  public var changeAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_NEO_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputs: [TW_NEO_Proto_TransactionInput] {
    get {return _storage._inputs}
    set {_uniqueStorage()._inputs = newValue}
  }

  public var outputs: [TW_NEO_Proto_TransactionOutput] {
    get {return _storage._outputs}
    set {_uniqueStorage()._outputs = newValue}
  }

  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var fee: Int64 {
    get {return _storage._fee}
    set {_uniqueStorage()._fee = newValue}
  }

  public var gasAssetID: String {
    get {return _storage._gasAssetID}
    set {_uniqueStorage()._gasAssetID = newValue}
  }

  public var gasChangeAddress: String {
    get {return _storage._gasChangeAddress}
    set {_uniqueStorage()._gasChangeAddress = newValue}
  }

  public var plan: TW_NEO_Proto_TransactionPlan {
    get {return _storage._plan ?? TW_NEO_Proto_TransactionPlan()}
    set {_uniqueStorage()._plan = newValue}
  }
  /// Returns true if `plan` has been explicitly set.
  public var hasPlan: Bool {return _storage._plan != nil}
  /// Clears the value of `plan`. Subsequent reads from it will return its default value.
  public mutating func clearPlan() {_uniqueStorage()._plan = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_NEO_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  /// Error message in case of error
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Describes a preliminary transaction output plan.
public struct TW_NEO_Proto_TransactionOutputPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Amount to be received at the other end.
  public var amount: Int64 = 0

  /// Maximum available amount.
  public var availableAmount: Int64 = 0

  public var change: Int64 = 0

  public var assetID: String = String()

  public var toAddress: String = String()

  public var changeAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Describes a preliminary transaction plan.
public struct TW_NEO_Proto_TransactionPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Used assets
  public var outputs: [TW_NEO_Proto_TransactionOutputPlan] = []

  /// Selected unspent transaction outputs.
  public var inputs: [TW_NEO_Proto_TransactionInput] = []

  /// GAS used
  public var fee: Int64 = 0

  /// Error message in case of error
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.NEO.Proto"

extension TW_NEO_Proto_TransactionInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "prev_hash"),
    2: .standard(proto: "prev_index"),
    3: .same(proto: "value"),
    4: .standard(proto: "asset_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.prevHash)
      case 2: try decoder.decodeSingularFixed32Field(value: &self.prevIndex)
      case 3: try decoder.decodeSingularInt64Field(value: &self.value)
      case 4: try decoder.decodeSingularStringField(value: &self.assetID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prevHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.prevHash, fieldNumber: 1)
    }
    if self.prevIndex != 0 {
      try visitor.visitSingularFixed32Field(value: self.prevIndex, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 3)
    }
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_TransactionInput, rhs: TW_NEO_Proto_TransactionInput) -> Bool {
    if lhs.prevHash != rhs.prevHash {return false}
    if lhs.prevIndex != rhs.prevIndex {return false}
    if lhs.value != rhs.value {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_NEO_Proto_TransactionOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_id"),
    2: .same(proto: "amount"),
    3: .standard(proto: "to_address"),
    4: .standard(proto: "change_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.assetID)
      case 2: try decoder.decodeSingularSInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 4: try decoder.decodeSingularStringField(value: &self.changeAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularSInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_TransactionOutput, rhs: TW_NEO_Proto_TransactionOutput) -> Bool {
    if lhs.assetID != rhs.assetID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_NEO_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
    2: .same(proto: "outputs"),
    3: .standard(proto: "private_key"),
    4: .same(proto: "fee"),
    5: .standard(proto: "gas_asset_id"),
    6: .standard(proto: "gas_change_address"),
    7: .same(proto: "plan"),
  ]

  fileprivate class _StorageClass {
    var _inputs: [TW_NEO_Proto_TransactionInput] = []
    var _outputs: [TW_NEO_Proto_TransactionOutput] = []
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _fee: Int64 = 0
    var _gasAssetID: String = String()
    var _gasChangeAddress: String = String()
    var _plan: TW_NEO_Proto_TransactionPlan? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _inputs = source._inputs
      _outputs = source._outputs
      _privateKey = source._privateKey
      _fee = source._fee
      _gasAssetID = source._gasAssetID
      _gasChangeAddress = source._gasChangeAddress
      _plan = source._plan
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._inputs)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._outputs)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._fee)
        case 5: try decoder.decodeSingularStringField(value: &_storage._gasAssetID)
        case 6: try decoder.decodeSingularStringField(value: &_storage._gasChangeAddress)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._plan)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._inputs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputs, fieldNumber: 1)
      }
      if !_storage._outputs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outputs, fieldNumber: 2)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 3)
      }
      if _storage._fee != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fee, fieldNumber: 4)
      }
      if !_storage._gasAssetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gasAssetID, fieldNumber: 5)
      }
      if !_storage._gasChangeAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gasChangeAddress, fieldNumber: 6)
      }
      if let v = _storage._plan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_SigningInput, rhs: TW_NEO_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._inputs != rhs_storage._inputs {return false}
        if _storage._outputs != rhs_storage._outputs {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._gasAssetID != rhs_storage._gasAssetID {return false}
        if _storage._gasChangeAddress != rhs_storage._gasChangeAddress {return false}
        if _storage._plan != rhs_storage._plan {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_NEO_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_SigningOutput, rhs: TW_NEO_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_NEO_Proto_TransactionOutputPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionOutputPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "available_amount"),
    3: .same(proto: "change"),
    4: .standard(proto: "asset_id"),
    5: .standard(proto: "to_address"),
    6: .standard(proto: "change_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 2: try decoder.decodeSingularInt64Field(value: &self.availableAmount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.change)
      case 4: try decoder.decodeSingularStringField(value: &self.assetID)
      case 5: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 6: try decoder.decodeSingularStringField(value: &self.changeAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 1)
    }
    if self.availableAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.availableAmount, fieldNumber: 2)
    }
    if self.change != 0 {
      try visitor.visitSingularInt64Field(value: self.change, fieldNumber: 3)
    }
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 4)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 5)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_TransactionOutputPlan, rhs: TW_NEO_Proto_TransactionOutputPlan) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.availableAmount != rhs.availableAmount {return false}
    if lhs.change != rhs.change {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_NEO_Proto_TransactionPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "inputs"),
    3: .same(proto: "fee"),
    4: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 4: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 3)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_NEO_Proto_TransactionPlan, rhs: TW_NEO_Proto_TransactionPlan) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
