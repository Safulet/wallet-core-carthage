// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Polkadot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum TW_Polkadot_Proto_Network: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case polkadot // = 0
  case kusama // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .polkadot
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .polkadot
    case 2: self = .kusama
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .polkadot: return 0
    case .kusama: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Polkadot_Proto_Network: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Polkadot_Proto_Network] = [
    .polkadot,
    .kusama,
  ]
}

#endif  // swift(>=4.2)

public enum TW_Polkadot_Proto_RewardDestination: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case staked // = 0
  case stash // = 1
  case controller // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .staked
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .staked
    case 1: self = .stash
    case 2: self = .controller
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .staked: return 0
    case .stash: return 1
    case .controller: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Polkadot_Proto_RewardDestination: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Polkadot_Proto_RewardDestination] = [
    .staked,
    .stash,
    .controller,
  ]
}

#endif  // swift(>=4.2)

public struct TW_Polkadot_Proto_Era {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// recent block number (called phase in polkadot code), should match block hash
  public var blockNumber: UInt64 = 0

  /// length of period, calculated from block number, e.g. 64
  public var period: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Polkadot_Proto_Balance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var transfer: TW_Polkadot_Proto_Balance.Transfer {
    get {
      if case .transfer(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Balance.Transfer()
    }
    set {_uniqueStorage()._messageOneof = .transfer(newValue)}
  }

  public var batchTransfer: TW_Polkadot_Proto_Balance.BatchTransfer {
    get {
      if case .batchTransfer(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Balance.BatchTransfer()
    }
    set {_uniqueStorage()._messageOneof = .batchTransfer(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transfer(TW_Polkadot_Proto_Balance.Transfer)
    case batchTransfer(TW_Polkadot_Proto_Balance.BatchTransfer)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polkadot_Proto_Balance.OneOf_MessageOneof, rhs: TW_Polkadot_Proto_Balance.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.transfer(let l), .transfer(let r)): return l == r
      case (.batchTransfer(let l), .batchTransfer(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var toAddress: String = String()

    /// big integer
    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BatchTransfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var transfers: [TW_Polkadot_Proto_Balance.Transfer] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Polkadot_Proto_Staking {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var bond: TW_Polkadot_Proto_Staking.Bond {
    get {
      if case .bond(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.Bond()
    }
    set {_uniqueStorage()._messageOneof = .bond(newValue)}
  }

  public var bondAndNominate: TW_Polkadot_Proto_Staking.BondAndNominate {
    get {
      if case .bondAndNominate(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.BondAndNominate()
    }
    set {_uniqueStorage()._messageOneof = .bondAndNominate(newValue)}
  }

  public var bondExtra: TW_Polkadot_Proto_Staking.BondExtra {
    get {
      if case .bondExtra(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.BondExtra()
    }
    set {_uniqueStorage()._messageOneof = .bondExtra(newValue)}
  }

  public var unbond: TW_Polkadot_Proto_Staking.Unbond {
    get {
      if case .unbond(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.Unbond()
    }
    set {_uniqueStorage()._messageOneof = .unbond(newValue)}
  }

  public var withdrawUnbonded: TW_Polkadot_Proto_Staking.WithdrawUnbonded {
    get {
      if case .withdrawUnbonded(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.WithdrawUnbonded()
    }
    set {_uniqueStorage()._messageOneof = .withdrawUnbonded(newValue)}
  }

  public var nominate: TW_Polkadot_Proto_Staking.Nominate {
    get {
      if case .nominate(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.Nominate()
    }
    set {_uniqueStorage()._messageOneof = .nominate(newValue)}
  }

  public var chill: TW_Polkadot_Proto_Staking.Chill {
    get {
      if case .chill(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking.Chill()
    }
    set {_uniqueStorage()._messageOneof = .chill(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case bond(TW_Polkadot_Proto_Staking.Bond)
    case bondAndNominate(TW_Polkadot_Proto_Staking.BondAndNominate)
    case bondExtra(TW_Polkadot_Proto_Staking.BondExtra)
    case unbond(TW_Polkadot_Proto_Staking.Unbond)
    case withdrawUnbonded(TW_Polkadot_Proto_Staking.WithdrawUnbonded)
    case nominate(TW_Polkadot_Proto_Staking.Nominate)
    case chill(TW_Polkadot_Proto_Staking.Chill)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polkadot_Proto_Staking.OneOf_MessageOneof, rhs: TW_Polkadot_Proto_Staking.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.bond(let l), .bond(let r)): return l == r
      case (.bondAndNominate(let l), .bondAndNominate(let r)): return l == r
      case (.bondExtra(let l), .bondExtra(let r)): return l == r
      case (.unbond(let l), .unbond(let r)): return l == r
      case (.withdrawUnbonded(let l), .withdrawUnbonded(let r)): return l == r
      case (.nominate(let l), .nominate(let r)): return l == r
      case (.chill(let l), .chill(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Bond {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var controller: String = String()

    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var rewardDestination: TW_Polkadot_Proto_RewardDestination = .staked

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BondAndNominate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var controller: String = String()

    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var rewardDestination: TW_Polkadot_Proto_RewardDestination = .staked

    public var nominators: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BondExtra {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Unbond {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct WithdrawUnbonded {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var slashingSpans: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Nominate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nominators: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Chill {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Input data necessary to create a signed transaction.
public struct TW_Polkadot_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Recent block hash, or genesis hash if era is not set
  public var blockHash: Data {
    get {return _storage._blockHash}
    set {_uniqueStorage()._blockHash = newValue}
  }

  public var genesisHash: Data {
    get {return _storage._genesisHash}
    set {_uniqueStorage()._genesisHash = newValue}
  }

  /// Current account nonce
  public var nonce: UInt64 {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  public var specVersion: UInt32 {
    get {return _storage._specVersion}
    set {_uniqueStorage()._specVersion = newValue}
  }

  public var transactionVersion: UInt32 {
    get {return _storage._transactionVersion}
    set {_uniqueStorage()._transactionVersion = newValue}
  }

  /// big integer
  public var tip: Data {
    get {return _storage._tip}
    set {_uniqueStorage()._tip = newValue}
  }

  /// Optional time validity limit, recommended, for replay-protection.  Empty means Immortal.
  public var era: TW_Polkadot_Proto_Era {
    get {return _storage._era ?? TW_Polkadot_Proto_Era()}
    set {_uniqueStorage()._era = newValue}
  }
  /// Returns true if `era` has been explicitly set.
  public var hasEra: Bool {return _storage._era != nil}
  /// Clears the value of `era`. Subsequent reads from it will return its default value.
  public mutating func clearEra() {_uniqueStorage()._era = nil}

  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var network: TW_Polkadot_Proto_Network {
    get {return _storage._network}
    set {_uniqueStorage()._network = newValue}
  }

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var balanceCall: TW_Polkadot_Proto_Balance {
    get {
      if case .balanceCall(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Balance()
    }
    set {_uniqueStorage()._messageOneof = .balanceCall(newValue)}
  }

  public var stakingCall: TW_Polkadot_Proto_Staking {
    get {
      if case .stakingCall(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_Staking()
    }
    set {_uniqueStorage()._messageOneof = .stakingCall(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case balanceCall(TW_Polkadot_Proto_Balance)
    case stakingCall(TW_Polkadot_Proto_Staking)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.balanceCall(let l), .balanceCall(let r)): return l == r
      case (.stakingCall(let l), .stakingCall(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_Polkadot_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Polkadot.Proto"

extension TW_Polkadot_Proto_Network: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POLKADOT"),
    2: .same(proto: "KUSAMA"),
  ]
}

extension TW_Polkadot_Proto_RewardDestination: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STAKED"),
    1: .same(proto: "STASH"),
    2: .same(proto: "CONTROLLER"),
  ]
}

extension TW_Polkadot_Proto_Era: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Era"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_number"),
    2: .same(proto: "period"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.blockNumber)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.period)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 1)
    }
    if self.period != 0 {
      try visitor.visitSingularUInt64Field(value: self.period, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Era, rhs: TW_Polkadot_Proto_Era) -> Bool {
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Balance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Balance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfer"),
    2: .same(proto: "batchTransfer"),
  ]

  fileprivate class _StorageClass {
    var _messageOneof: TW_Polkadot_Proto_Balance.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: TW_Polkadot_Proto_Balance.Transfer?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .transfer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .transfer(v)}
        case 2:
          var v: TW_Polkadot_Proto_Balance.BatchTransfer?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .batchTransfer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .batchTransfer(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._messageOneof {
      case .transfer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .batchTransfer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Balance, rhs: TW_Polkadot_Proto_Balance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Balance.Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Balance.protoMessageName + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "to_address"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Balance.Transfer, rhs: TW_Polkadot_Proto_Balance.Transfer) -> Bool {
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Balance.BatchTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Balance.protoMessageName + ".BatchTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.transfers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transfers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transfers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Balance.BatchTransfer, rhs: TW_Polkadot_Proto_Balance.BatchTransfer) -> Bool {
    if lhs.transfers != rhs.transfers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Staking"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bond"),
    2: .standard(proto: "bond_and_nominate"),
    3: .standard(proto: "bond_extra"),
    4: .same(proto: "unbond"),
    5: .standard(proto: "withdraw_unbonded"),
    6: .same(proto: "nominate"),
    7: .same(proto: "chill"),
  ]

  fileprivate class _StorageClass {
    var _messageOneof: TW_Polkadot_Proto_Staking.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: TW_Polkadot_Proto_Staking.Bond?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .bond(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .bond(v)}
        case 2:
          var v: TW_Polkadot_Proto_Staking.BondAndNominate?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .bondAndNominate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .bondAndNominate(v)}
        case 3:
          var v: TW_Polkadot_Proto_Staking.BondExtra?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .bondExtra(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .bondExtra(v)}
        case 4:
          var v: TW_Polkadot_Proto_Staking.Unbond?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .unbond(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .unbond(v)}
        case 5:
          var v: TW_Polkadot_Proto_Staking.WithdrawUnbonded?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .withdrawUnbonded(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .withdrawUnbonded(v)}
        case 6:
          var v: TW_Polkadot_Proto_Staking.Nominate?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .nominate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .nominate(v)}
        case 7:
          var v: TW_Polkadot_Proto_Staking.Chill?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .chill(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .chill(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._messageOneof {
      case .bond(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .bondAndNominate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .bondExtra(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .unbond(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .withdrawUnbonded(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .nominate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .chill(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking, rhs: TW_Polkadot_Proto_Staking) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.Bond: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".Bond"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "controller"),
    2: .same(proto: "value"),
    3: .standard(proto: "reward_destination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.controller)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      case 3: try decoder.decodeSingularEnumField(value: &self.rewardDestination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.controller.isEmpty {
      try visitor.visitSingularStringField(value: self.controller, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if self.rewardDestination != .staked {
      try visitor.visitSingularEnumField(value: self.rewardDestination, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.Bond, rhs: TW_Polkadot_Proto_Staking.Bond) -> Bool {
    if lhs.controller != rhs.controller {return false}
    if lhs.value != rhs.value {return false}
    if lhs.rewardDestination != rhs.rewardDestination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.BondAndNominate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".BondAndNominate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "controller"),
    2: .same(proto: "value"),
    3: .standard(proto: "reward_destination"),
    4: .same(proto: "nominators"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.controller)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      case 3: try decoder.decodeSingularEnumField(value: &self.rewardDestination)
      case 4: try decoder.decodeRepeatedStringField(value: &self.nominators)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.controller.isEmpty {
      try visitor.visitSingularStringField(value: self.controller, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if self.rewardDestination != .staked {
      try visitor.visitSingularEnumField(value: self.rewardDestination, fieldNumber: 3)
    }
    if !self.nominators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nominators, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.BondAndNominate, rhs: TW_Polkadot_Proto_Staking.BondAndNominate) -> Bool {
    if lhs.controller != rhs.controller {return false}
    if lhs.value != rhs.value {return false}
    if lhs.rewardDestination != rhs.rewardDestination {return false}
    if lhs.nominators != rhs.nominators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.BondExtra: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".BondExtra"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.BondExtra, rhs: TW_Polkadot_Proto_Staking.BondExtra) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.Unbond: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".Unbond"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.Unbond, rhs: TW_Polkadot_Proto_Staking.Unbond) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.WithdrawUnbonded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".WithdrawUnbonded"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slashing_spans"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.slashingSpans)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.slashingSpans != 0 {
      try visitor.visitSingularInt32Field(value: self.slashingSpans, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.WithdrawUnbonded, rhs: TW_Polkadot_Proto_Staking.WithdrawUnbonded) -> Bool {
    if lhs.slashingSpans != rhs.slashingSpans {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.Nominate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".Nominate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nominators"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.nominators)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nominators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nominators, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.Nominate, rhs: TW_Polkadot_Proto_Staking.Nominate) -> Bool {
    if lhs.nominators != rhs.nominators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_Staking.Chill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polkadot_Proto_Staking.protoMessageName + ".Chill"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_Staking.Chill, rhs: TW_Polkadot_Proto_Staking.Chill) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_hash"),
    2: .standard(proto: "genesis_hash"),
    3: .same(proto: "nonce"),
    4: .standard(proto: "spec_version"),
    5: .standard(proto: "transaction_version"),
    6: .same(proto: "tip"),
    7: .same(proto: "era"),
    8: .standard(proto: "private_key"),
    9: .same(proto: "network"),
    10: .standard(proto: "balance_call"),
    11: .standard(proto: "staking_call"),
  ]

  fileprivate class _StorageClass {
    var _blockHash: Data = SwiftProtobuf.Internal.emptyData
    var _genesisHash: Data = SwiftProtobuf.Internal.emptyData
    var _nonce: UInt64 = 0
    var _specVersion: UInt32 = 0
    var _transactionVersion: UInt32 = 0
    var _tip: Data = SwiftProtobuf.Internal.emptyData
    var _era: TW_Polkadot_Proto_Era? = nil
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _network: TW_Polkadot_Proto_Network = .polkadot
    var _messageOneof: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockHash = source._blockHash
      _genesisHash = source._genesisHash
      _nonce = source._nonce
      _specVersion = source._specVersion
      _transactionVersion = source._transactionVersion
      _tip = source._tip
      _era = source._era
      _privateKey = source._privateKey
      _network = source._network
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._blockHash)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._genesisHash)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._nonce)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._specVersion)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._transactionVersion)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._tip)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._era)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._network)
        case 10:
          var v: TW_Polkadot_Proto_Balance?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .balanceCall(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .balanceCall(v)}
        case 11:
          var v: TW_Polkadot_Proto_Staking?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .stakingCall(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .stakingCall(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._blockHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._blockHash, fieldNumber: 1)
      }
      if !_storage._genesisHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._genesisHash, fieldNumber: 2)
      }
      if _storage._nonce != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._nonce, fieldNumber: 3)
      }
      if _storage._specVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._specVersion, fieldNumber: 4)
      }
      if _storage._transactionVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._transactionVersion, fieldNumber: 5)
      }
      if !_storage._tip.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._tip, fieldNumber: 6)
      }
      if let v = _storage._era {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 8)
      }
      if _storage._network != .polkadot {
        try visitor.visitSingularEnumField(value: _storage._network, fieldNumber: 9)
      }
      switch _storage._messageOneof {
      case .balanceCall(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .stakingCall(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_SigningInput, rhs: TW_Polkadot_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._blockHash != rhs_storage._blockHash {return false}
        if _storage._genesisHash != rhs_storage._genesisHash {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._specVersion != rhs_storage._specVersion {return false}
        if _storage._transactionVersion != rhs_storage._transactionVersion {return false}
        if _storage._tip != rhs_storage._tip {return false}
        if _storage._era != rhs_storage._era {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_SigningOutput, rhs: TW_Polkadot_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
